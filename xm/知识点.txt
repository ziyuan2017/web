1.盒模型
盒子模型的范围包括 margin、border、padding、content
W3C的盒模型 content 部分不包含其他部分。
IE 的盒模型 content 部分包含了 border 和 padding。

2.


=======h5=======
webstorage是本地存储，存储在客户端，包括localStorage和sessionStorage
localStorage生命周期是永久，这意味着除非用户显示在浏览器提供的UI上清除localStorage信息，否则这些信息将永远存在。存放数据大小为一般为5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。

sessionStorage仅在当前会话下有效，关闭页面或浏览器后被清除。存放数据大小为一般为5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。源生接口可以接受，亦可再次封装来对Object和Array有更好的支持。

不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标 签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。


生命期为只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。 存放数据大小为4K左右 。有个数限制（各浏览器不同），一般不能超过20个。与服务器端通信：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题。但Cookie需要程序员自己封装，源生的Cookie接口不友好(http://www.jb51.net/article/6... 
)。

cookie的优点：具有极高的扩展性和可用性

1.通过良好的编程，控制保存在cookie中的session对象的大小。
2.通过加密和安全传输技术，减少cookie被破解的可能性。
3.只有在cookie中存放不敏感的数据，即使被盗取也不会有很大的损失。
4.控制cookie的生命期，使之不会永远有效。这样的话偷盗者很可能拿到的就   是一个过期的cookie。
cookie的缺点：

1.cookie的长度和数量的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB。否则会被截掉。
2.安全性问题。如果cookie被人拦掉了，那个人就可以获取到所有session信息。加密的话也不起什么作用。
3.有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务端保存一个计数器。若吧计数器保存在客户端，则起不到什么作用。

localStorage、sessionStorage、Cookie共同点：都是保存在浏览器端，且同源的。

==========css==========
上下居中 
//不知道父级高
position: absolute;
top: 50%;
transform: translateY(-50%);

//知道父级高
position: relative;
top: 50%;
transform: translateY(-50%);

Flex 布局
parentElement{
    display:flex;/*Flex布局*/
    display: -webkit-flex; /* Safari */
    align-items:center;/*指定垂直居中*/
}
利用display:table-cell属性使内容垂直居中
最简单的一种使行内元素居中的方法，使用line-height属性
使用css3的display:-webkit-box属性，再设置-webkit-box-pack:center/-webkit-box-align:center
8，使用css3的新属性transform:translate(x,y)属性
9、最高大上的一种，使用:before元素

左右
margin：0 auto;
inline-block实现水平居中方法
浮动实现水平居中的方法
绝对定位实现水平居中
CSS3的flex实现水平居中方法
CSS3的fit-content实现水平居中方法

==========javascript========
1.箭头函数
    不能用new命令实例化一个对象
    不可以使用yield命令
    不可以使用arguments对象（类数组对象）
箭头函数内的this值继承自外围作用域
对象方法内的this指向调用这个方法的对象
避免使用早期的.bind()函数或者需要固定上下文的地方并且让代码更加简洁
需要动态上下文的地方不能使用箭头函数

2.new
(1)创建一个新对象；
(2)将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象） ；
(3)执行构造函数中的代码（为这个新对象添加属性） ；
(4)返回新对象。

3.变量
var 默认是全局性的，只存在函数级作用域
let const 块级作用域{}

4.rest 参数
当一个函数的最后一个参数有...这样的前缀，它就会变成一个参数的数组。
function test2(name, ...args) { console.log(args);}
test2('liangyin', 2, 3);// [2,3]

5.Object.assign 浅拷贝、对象属性的合并
const objA = { name: 'cc', age: 18 }
const objB = { address: 'beijing' }
const objC = {} // 这个为目标对象
const objs = Object.assign(objC, objA, objB) //将objA, objB 整合到objC中

6.递归函数
在函数内部直接接或间接调用函数本身，则该函数称为递归函数。
优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。
针对尾递归优化的语言可以通过尾递归防止栈溢出。 return 函数()
foo(n){ 
  n-- 
  return foo(n) 
}
foo(10) 

7.this
this 的值默认指向全局对象
在箭头函数中，this与封闭词法上下文的this保持一致。在全局代码中，它将被设置为全局对象：
当函数作为对象里的方法被调用时，它们的 this 是调用该函数的对象。
原型链中的 this 对于在对象原型链上某处定义的方法，同样的概念也适用。如果该方法存在于一个对象的原型链上，那么this指向的是调用这个方法的对象，就像该方法在对象上一样。
当一个函数用作构造函数时（使用new关键字），它的this被绑定到正在构造的新对象
当函数被用作事件处理函数时，它的this指向触发事件的元素（一些浏览器在使用非addEventListener的函数动态添加监听函数时不遵守这个约定）。
当代码被内联on-event 处理函数调用时，它的this指向监听器所在的DOM元素

8.继承
原型链是实现js继承的主要方法，他的原理是让利用原型让一个引用类型继承另一个引用类型的属性和方法。如果我们让一个原型对象等于一个实例，那么，此时的原型对象将包含指向另一个原型的指针假如另一个原型又等于一个对象的实例，如此一层套一层，这就是原型链的基本概念。
1.使用对象冒充实现继承(该种实现方式可以实现多继承)
  让父类的构造函数成为子类的方法,然后调用该子类的方法,通过this关键字给所有的属性和方法赋值
2.采用call方法改变函数上下文实现继承(该种方式不能继承原型链,若想继承原型链，则采用5混合模式)
  改变函数内部的函数上下文this,使它指向传入函数的具体对象
3.采用Apply方法改变函数上下文实现继承(该种方式不能继承原型链,若想继承原型链，则采用5混合模式)
  改变函数内部的函数上下文this,使它指向传入函数的具体对象
4.采用原型链的方式实现继承
  使子类原型对象指向父类的实例以实现继承,即重写类的原型,弊端是不能直接实现多继承
5.采用混合模式实现继承

vue的理解
Model(模型层存数据)+View(视图层)+ViewModel(业务逻辑)
优点
1、使用vue不必担心布局更改和类名重复导致的js重写，因为它是靠数据驱动双向绑定，底层是通过Object.defineProperty()【对象.定义属性()】 定义的数据 set、get 函数原理实现。
2、组件化开发，让项目的可拓展性、移植性更好，代码重用性更高，就好像农民工建房子，拿起自己的工具包就可以开工。项目经理坐等收楼就好。
3、单页应用的体验零距离接触安卓原生应用，局部组件更新界面，让用户体验更快速省时。
4、js的代码无形的规范，团队合作开发代码可阅读性更高。
5.UI与逻辑的分离。
6.写unit测试比较方便，毕竟测ViewModel要比测个种Event方便多了。

缺点
1.如果你在Bindings里写了自定义的方法，而这个方法恰好需要调试时可能有些不便。
2.对于交互很少的webapp,MVVM略显沉重
3.对于大型webapp，所有逻辑和数据都在ViewModel里，ViewModel会越来越复杂。
原理
vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()【对象.定义属性()】来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。


1、active-class是哪个组件的属性？嵌套路由怎么定义？
答：vue-router模块的router-link组件。
 

2、怎么定义vue-router的动态路由？怎么获取传过来的动态参数？ 
答：在router目录下的index.js文件中，对path属性加上/:id。  使用router对象的params.id
 

3、vue-router有哪几种导航钩子？    
答：三种，一种是全局导航钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截。第二种：组件内的钩子；第三种：单独路由独享组件
 

4、scss是什么？安装使用的步骤是？有哪几大特性？
答：预处理css，把css当前函数编写，定义变量,嵌套。 先装css-loader、node-loader、sass-loader等加载器模块，在webpack-base.config.js配置文件中加多一个拓展:extenstion，再加多一个模块：module里面test、loader
 

4.1、scss是什么？在vue.cli中的安装使用步骤是？有哪几大特性？
答：css的预编译。
使用步骤：
第一步：用npm 下三个loader（sass-loader、css-loader、node-sass）
第二步：在build目录找到webpack.base.config.js，在那个extends属性中加一个拓展.scss
第三步：还是在同一个文件，配置一个module属性
第四步：然后在组件的style标签加上lang属性 ，例如：lang=”scss”
有哪几大特性:
1、可以用变量，例如（$变量名称=值）；
2、可以用混合器，例如（）
3、可以嵌套
 

5、mint-ui是什么？怎么使用？说出至少三个组件使用方法？
答：基于vue的前端组件库。npm安装，然后import样式和js，vue.use（mintUi）全局引入。在单个组件局部引入：import {Toast} from ‘mint-ui’。组件一：Toast(‘登录成功’)；组件二：mint-header；组件三：mint-swiper
 

6、v-model是什么？怎么使用？ vue中标签怎么绑定事件？
答：可以实现双向绑定，指令（v-class、v-for、v-if、v-show、v-on）。vue的model层的data属性。绑定事件：<input @click=doLog() />
 

7、axios是什么？怎么使用？描述使用它实现登录功能的流程？
答：请求后台资源的模块。npm install axios -S装好，然后发送的是跨域，需在配置文件中config/index.js进行设置。后台如果是Tp5则定义一个资源路由。js中使用import进来，然后.get或.post。返回在.then函数中如果成功，失败则是在.catch函数中

 

8、axios+tp5进阶中，调用axios.post(‘api/user’)是进行的什么操作？axios.put(‘api/user/8′)呢？
答：跨域，添加用户操作，更新操作。
 

9、什么是RESTful API？怎么使用?
答：是一个api的标准，无状态请求。请求的路由地址是固定的，如果是tp5则先路由配置中把资源路由配置好。标准有：.post .put .delete
 

10、vuex是什么？怎么使用？哪种功能场景使用它？
答：vue框架中状态管理。在main.js引入store，注入。新建了一个目录store，….. export 。场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车
 

11、mvvm框架是什么？它和其它框架（jquery）的区别是什么？哪些场景适合？
答：一个model+view+viewModel框架，数据模型model，viewModel连接两个
区别：vue数据驱动，通过数据来显示视图层而不是节点操作。
场景：数据操作比较多的场景，更加便捷
 

12、自定义指令（v-check、v-focus）的方法有哪些？它有哪些钩子函数？还有哪些钩子函数参数？
答：全局定义指令：在vue对象的directive方法里面有两个参数，一个是指令名称，另外一个是函数。组件内定义指令：directives
钩子函数：bind（绑定事件触发）、inserted(节点插入的时候触发)、update（组件内相关更新）
钩子函数参数：el、binding
 

13、说出至少4种vue当中的指令和它的用法？
答：v-if：判断是否隐藏；v-for：数据循环出来；v-bind:class：绑定一个属性；v-model：实现双向绑定
 

14、vue-router是什么？它有哪些组件？
答：vue用来写路由一个插件。router-link、router-view

18、请说下封装 vue 组件的过程？
答：首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：效率低、难维护、复用性等问题。
然后，使用Vue.extend方法创建一个组件，然后使用Vue.component方法注册组件。子组件需要数据，可以在props中接受定义。而子组件修改好数据后，想把数据传递给父组件。可以采用emit方法。
 

19、你是怎么认识vuex的？
答：vuex可以理解为一种开发模式或框架。比如PHP有thinkphp，java有spring等。
通过状态（数据源）集中管理驱动组件的变化（好比spring的IOC容器对bean进行集中管理）。
应用级的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。
 

20、vue-loader是什么？使用它的用途有哪些？
答：解析.vue文件的一个加载器，跟template/js/style转换成js模块。
用途：js可以写es6、style样式可以scss或less、template可以加jade等
 

21、请说出vue.cli项目中src目录